
context.properties = {
    #library.name.system                   = support/libspa-support
    #context.data-loop.library.name.system = support/libspa-support
    #mem.warn-mlock                        = false
    #mem.allow-mlock                       = true
    #mem.mlock-all                         = false
    #log.level                             = 2
    #cpu.zero.denormals                    = false

    core.daemon = true
    core.name   = pipewire-0

    default.clock.rate          = 48000
    default.clock.allowed-rates = [ 41000 48000 96000 ]
    default.clock.quantum       = 512
    default.clock.min-quantum   = 256
    default.clock.max-quantum   = 4096
    default.clock.quantum-limit = 8192
    default.clock.quantum-floor = 4
    #default.audio.format        = F32LE

    clock.power-of-two-quantum  = true

    link.max-buffers            = 16

    loop.rt-prio                = -1
    context.num-data-loops      = 7
    loop.class                  = data.rt
    #thread.affinity             = [ 0 1 ]

    support.dbus                = true

    settings.check-quantum      = true
    settings.check-rate         = true

    minimal.use-udev            = true
    minimal.use-pulse           = true

    context.data-loops = [
       {
           #library.name.system = support/libspa-support
           loop.rt-prio = -1
           loop.class = [ data.rt audio.rt ]
           #thread.name = data-loop.0
           #thread.affinity = [ 0 1 ]    # optional array of CPUs
       }
       {
           #library.name.system = support/libspa-support
           loop.rt-prio = -1
           loop.class = mic.rt
           #thread.name = data-loop.5
           #thread.affinity = [ 2 3 ]    # optional array of CPUs
       }
    ]
}


context.spa-libs = {
    audio.convert.* = audioconvert/libspa-audioconvert
    avb.*           = avb/libspa-avb
    api.alsa.*      = alsa/libspa-alsa
    api.v4l2.*      = v4l2/libspa-v4l2
    api.libcamera.* = libcamera/libspa-libcamera
    api.bluez5.*    = bluez5/libspa-bluez5
    api.vulkan.*    = vulkan/libspa-vulkan
    api.jack.*      = jack/libspa-jack
    support.*       = support/libspa-support
    video.convert.* = videoconvert/libspa-videoconvert
}

context.modules = [
    { name = libpipewire-module-rt
        args = {
            nice.level    = -11
            rt.prio       = 88
            #rt.time.soft = -1
            #rt.time.hard = -1
            #uclamp.min = 0
            #uclamp.max = 1024
        }
        flags = [ ifexists nofail ]
        condition = [ { module.rt = !false } ]
    }

    { name = libpipewire-module-protocol-native
        args = {
            # List of server Unix sockets, and optionally permissions
            #sockets = [ { name = "pipewire-0" }, { name = "pipewire-0-manager" } ]
        }
    }

    { name = libpipewire-module-profiler
        args = {
            #profile.interval.ms = 0
        }
        condition = [ { module.profiler = !false } ]
    }

    { name = libpipewire-module-metadata
        condition = [ { module.metadata = !false } ]
    }

    { name = libpipewire-module-spa-device-factory
        condition = [ { module.spa-device-factory = !false } ]
    }

    { name = libpipewire-module-spa-node-factory
        condition = [ { module.spa-node-factory = !false } ]
    }

    { name = libpipewire-module-client-node
        condition = [ { module.client-node = !false } ]
    }

    { name = libpipewire-module-client-device
        condition = [ { module.client-device = !false } ]
    }

    { name = libpipewire-module-portal
        flags = [ ifexists nofail ]
        condition = [ { module.portal = !false } ]
    }

    { name = libpipewire-module-access
        args = {
            # Socket-specific access permissions
            #access.socket = { pipewire-0 = "default", pipewire-0-manager = "unrestricted" }

            # Deprecated legacy mode (not socket-based),
            # for now enabled by default if access.socket is not specified
            #access.legacy = true
        }
        condition = [ { module.access = !false } ]
    }

    { name = libpipewire-module-adapter
        condition = [ { module.adapter = !false } ]
    }

    { name = libpipewire-module-link-factory
        args = {
            #allow.link.passive = false
        }
        condition = [ { module.link-factory = !false } ]
    }

    { name = libpipewire-module-session-manager
        condition = [ { module.session-manager = !false } ]
    }

    { name = libpipewire-module-jackdbus-detect
        args = {
            #jack.library     = libjack.so.0
            #jack.server      = null
            #jack.client-name = PipeWire
            #jack.connect     = true
            #tunnel.mode      = duplex  # source|sink|duplex
            source.props = {
                #audio.channels = 2
		        #midi.ports = 1
                #audio.position = [ FL FR ]
                # extra sink properties
            }
            sink.props = {
                #audio.channels = 2
		        #midi.ports = 1
                #audio.position = [ FL FR ]
                # extra sink properties
            }
        }
        flags = [ ifexists nofail ]
        condition = [ { module.jackdbus-detect = !false } ]
    }
]

context.objects = [
    { factory = spa-node-factory
        args = {
            factory.name    = support.node.driver
            node.name       = Dummy-Driver
            node.group      = pipewire.dummy
            node.sync-group  = sync.dummy
            priority.driver = 200000
            #clock.id       = monotonic # realtime | tai | monotonic-raw | boottime
            #clock.name     = "clock.system.monotonic"
        }
        condition = [ { factory.dummy-driver = !false } ]
    }
    { factory = spa-node-factory
        args = {
            factory.name    = support.node.driver
            node.name       = Freewheel-Driver
            priority.driver = 190000
            node.group      = pipewire.freewheel
            node.sync-group  = sync.dummy
            node.freewheel  = true
            #freewheel.wait = 10
        }
        condition = [ { factory.freewheel-driver = !false } ]
    }
]